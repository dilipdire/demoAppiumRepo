package org.mis.tests;

import org.testng.annotations.Test;
//import Listeners.ExtentListeners;

import java.io.IOException;
import java.text.ParseException;

class UserLoginRoleTest extends BaseTest {

  /* @Test(priority = 1)
   public void switchRole() throws InterruptedException {
        getChromeDriver().get(PropertyReader.getProperty("base.url"));
      getNgWebDriver().waitForAngularRequestsToFinish();
       LoginPage loginPage = new LoginPage(getChromeDriver());
       loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
       waitForCommandToFinish();
       HomePage homePage = new HomePage(getChromeDriver());
       homePage.switchRoleToMisAdmin();
        waitForCommandToFinish();
        homePage.clickManageProperties();
        waitForCommandToFinish();
        PropertyPage propertyPage = new PropertyPage(getChromeDriver());
        propertyPage.selectPropertyEnginerring();
        waitForCommandToFinish();
        propertyPage.updatePropertyEngineering();
        waitForCommandToFinish();
        propertyPage.selectPropertyOperations();
        waitForCommandToFinish();
        propertyPage.updatePropertyOperations();
        waitForCommandToFinish();
       propertyPage.reloadProperty();
        waitForCommandToFinish();
        homePage.switchRoleToMisUser();
       waitForCommandToFinish();
    }*/








     @Test(priority = 2)
     public void tripWiseBillingModel() throws InterruptedException, ParseException, IOException {

     /* getChromeDriver().get(PropertyReader.getProperty("base.url"));
       getNgWebDriver().waitForAngularRequestsToFinish();
       LoginPage loginPage = new LoginPage(getChromeDriver());
       loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
       waitForCommandToFinish();
       HomePage homePage = new HomePage(getChromeDriver());
       FuelTypePage fuelTypePage = new FuelTypePage(getChromeDriver());
       ContractPage contractPage = new ContractPage(getChromeDriver());
       TripPackage tripPackage = new TripPackage(getChromeDriver());
       homePage.navigateToSettings();
       waitForCommandToFinish();
       homePage.navigateToNewContract();
       waitForCommandToFinish();
       waitForCommandToFinish();
       homePage.switchIframe();
       waitForCommandToFinish();
       fuelTypePage.AddFuelTypePage();
       waitForCommandToFinish();
       contractPage.clickOnContractPage();
       waitForCommandToFinish();
       waitForCommandToFinish();
       contractPage.clickToContractUpdate();
       waitForCommandToFinish();
       contractPage.clickSearch();
       waitForCommandToFinish();
       contractPage.selectBillingModel();
       contractPage.selectCabType();
       contractPage.editGST();
       contractPage.selectFuelType();
       contractPage.selectBillingContractType();
       contractPage.selectTripKmSchema();
       contractPage.selectDutyParameter();
       waitForCommandToFinish();
       contractPage.clickOnTripPackageSlab();
       waitForCommandToFinish();
       waitForCommandToFinish();
       contractPage.addTripPackageSlabName();
       contractPage.addTripPackageSlabMaxKm();
       contractPage.addTripPackageSlabFuelCost();
       contractPage.addTripPackageSlabFixedCost();
       contractPage.addTripPackageSlabJumpCriteria();
       contractPage.addTripPackageSlabExtraKmCost();
       contractPage.addTripPackageSlabACSurcharge();
       contractPage.addTripPackageSlabAdditionalExtraKmCostAC();
       contractPage.addTripPackageSlabEscortAC();
       contractPage.addTripPackageSlabEscortNonAC();
       contractPage.saveContract();
       waitForCommandToFinish();
       waitForCommandToFinish();
       waitForCommandToFinish();
       waitForCommandToFinish();
       homePage.switchToDefaultFrame();
       waitForCommandToFinish();
       homePage.navigateToDashboard();
       waitForCommandToFinish();
       HomePage homepage = new HomePage(getChromeDriver());
       DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
       //String empNameSearch= excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
       //String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
       dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
       DateAndTime dateAndTime = new DateAndTime();
       String hour2 = dateAndTime.hour24formate();
       String min = dateAndTime.minTwoHourLater();
       dashboardPage.createNonShiftTripsheet(min, hour2);
       String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
       dashboardPage.assignCabToNewTripsheet(cabName);
       dashboardPage.saveTripsheet();
       waitForCommandToFinish();
       dashboardPage.performTrip(hour2, min);
       String tripId = dashboardPage.performTrip(hour2, min);
       String contractName = WebElementHelper.getTripBasedCellValue(1, 0);
       dashboardPage.selectContract(contractName);
       dashboardPage.addEmployee();
       dashboardPage.saveTripsheetInformation();
       waitForCommandToFinish();
       dashboardPage.generateBill();
       waitForCommandToFinish();
       homePage.navigateToReportDownload();
       waitForCommandToFinish();
       homepage.downloadReportDefault(tripId);
       waitForCommandToFinish();
       //  loginPage.logout();
       waitForCommandToFinish();*/


     }
   /* @Test(priority = 1)
   public void kmSlabBillingModel() throws InterruptedException, ParseException, IOException {
        getChromeDriver().get(PropertyReader.getProperty("base.url"));
        getNgWebDriver().waitForAngularRequestsToFinish();
        LoginPage loginPage = new LoginPage(getChromeDriver());
        loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
        waitForCommandToFinish();
        HomePage homePage = new HomePage(getChromeDriver());
        ContractKmBased contractKmBased = new ContractKmBased(getChromeDriver());
        DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
        homePage.navigateToSettings();
        waitForCommandToFinish();
        homePage.navigateToNewContract();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        homePage.switchIframe();
        waitForCommandToFinish();
        contractKmBased.clickOnContractPage();
        waitForCommandToFinish();
        Thread.sleep(30000);
        contractKmBased.clickToContractUpdate();
        waitForCommandToFinish();
        contractKmBased.clickSearchKMSlab();
        waitForCommandToFinish();
        contractKmBased.selectBillingModelKmSlab();
        waitForCommandToFinish();
        contractKmBased.selectCabType();
        contractKmBased.editGST();
        contractKmBased.selectMileage();
        contractKmBased.selectFuelType();
        contractKmBased.selectBillingContractType();
        contractKmBased.selectTripKmSchema();
        contractKmBased.selectDistributionLogic();
        contractKmBased.selectDutyParameter();
        waitForCommandToFinish();
        contractKmBased.clickOnKmSlab();
        waitForCommandToFinish();
        contractKmBased.addKmSlabName();
        contractKmBased.addMaxKm();
        contractKmBased.addCostPerKm();
        contractKmBased.saveContract();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        homePage.switchToDefaultFrame();
        waitForCommandToFinish();
        homePage.navigateToDashboard();
        waitForCommandToFinish();
        HomePage homepage = new HomePage(getChromeDriver());
        String empName = excel.getSheet("addemployee").getRow(2).getCell(3).getStringCellValue();
        dashboardPage.searchEmployeeInDasboard(empName);
        DateAndTime dateAndTime=new DateAndTime();
        String hour2=dateAndTime.hour24formate();
        String min=dateAndTime.minTwoHourLater();
        dashboardPage.createNonShiftTripsheet(min , hour2);
        dashboardPage.assignCabToNewTripsheet();
        dashboardPage.saveTripsheet();
       String tripId = dashboardPage.performTrip();
        String contractName = excel.getSheet("contract").getRow(2).getCell(0).getStringCellValue();
        dashboardPage.selectContract(contractName);
        dashboardPage.saveTripsheetInformation();
       // homepage.performTrip();
        waitForCommandToFinish();
        dashboardPage.generateBill();
        homePage.navigateToDashboard();
        dashboardPage.navigateToReportDownload();
        dashboardPage.downloadReport();
        waitForCommandToFinish();
       // BillComparision billComparision = new BillComparision(getChromeDriver());
       // billComparision.billComparision();
        waitForCommandToFinish();
        homePage.navigateToReportDownload();
        waitForCommandToFinish();
        dashboardPage.downloadReport(tripId);
        waitForCommandToFinish();

    }
   @Test(priority = 2)
    public void zoneBasedTesting() throws InterruptedException, ParseException, IOException {
        getChromeDriver().get(PropertyReader.getProperty("base.url"));
        getNgWebDriver().waitForAngularRequestsToFinish();
       LoginPage loginPage = new LoginPage(getChromeDriver());
        loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
        waitForCommandToFinish();
        HomePage homePage = new HomePage(getChromeDriver());
        ContractPage contractPage = new ContractPage(getChromeDriver());
        BillingZonePage billingZonePage = new BillingZonePage(getChromeDriver());
        ContractZoneBasedPage contractZoneBasedPage = new ContractZoneBasedPage(getChromeDriver());
        DashboardPage dashboardPage=new DashboardPage(getChromeDriver());
        homePage.navigateToSettings();
        homePage.navigateToBillingZone();
        billingZonePage.addbillingZone();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        homePage.navigateToSettings();
        homePage.navigateToNewContract();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        homePage.switchIframe();
        waitForCommandToFinish();
        contractZoneBasedPage.clickOnBillingZonePage();
        billingZonePage.searchBillingZoneAndUpdate();
        Thread.sleep(10000);
        contractZoneBasedPage.clickOnContractPage();
        waitForCommandToFinish();
        Thread.sleep(30000);
        contractZoneBasedPage.clickToContractUpdate();
        waitForCommandToFinish();
        contractZoneBasedPage.clickSearchZoneBased();
        waitForCommandToFinish();
        contractZoneBasedPage.selectBillingModel();
        waitForCommandToFinish();
        contractZoneBasedPage.selectCabType();
        contractZoneBasedPage.editGST();
        contractZoneBasedPage.selectFuelType();
        contractZoneBasedPage.selectBillingContractType();
        contractZoneBasedPage.selectTripKmSchema();
        contractZoneBasedPage.selectDutyParameter();
        contractZoneBasedPage.clickOnZoneBased();
        contractZoneBasedPage.addZoneSlabName();
        String zoneName = excel.getSheet("contract").getRow(1).getCell(2).getStringCellValue();
        contractZoneBasedPage.addZoneName(zoneName);
        contractZoneBasedPage.addFuelCost();
        contractZoneBasedPage.addFixedCost();
        contractZoneBasedPage.saveContract();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        homePage.switchToDefaultFrame();
        waitForCommandToFinish();
        homePage.navigateToDashboard();
        waitForCommandToFinish();
        HomePage homepage = new HomePage(getChromeDriver());
     String empNameSearch= excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
     String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
     dashboardPage.searchEmployeeInDasboard(empName,empNameSearch);
        DateAndTime dateAndTime=new DateAndTime();
        String hour2=dateAndTime.hour24formate();
        String min=dateAndTime.minTwoHourLater();
        dashboardPage.createNonShiftTripsheet(min , hour2);
        String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
        dashboardPage.assignCabToNewTripsheet(cabName);
        dashboardPage.saveTripsheet();
        String tripId = dashboardPage.performTrip(hour2,min);
        String contractName = excel.getSheet("contract").getRow(2).getCell(1).getStringCellValue();
        dashboardPage.selectContract("contractName");
        dashboardPage.selectZone(zoneName);
        dashboardPage.saveTripsheetInformation();
        waitForCommandToFinish();
        dashboardPage.generateBill();
        homePage.navigateToDashboard();
        homePage.navigateToReportDownload();
        dashboardPage.downloadReport(tripId);
        waitForCommandToFinish();

    }

    @Test(priority = 1)
    public void employeeBasedTesting() throws InterruptedException, ParseException {
        getChromeDriver().get(PropertyReader.getProperty("base.url"));
        getNgWebDriver().waitForAngularRequestsToFinish();
        waitForCommandToFinish();
        LoginPage loginPage = new LoginPage(getChromeDriver());
        loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
        waitForCommandToFinish();
        HomePage homePage = new HomePage(getChromeDriver());
        ContractEmployeeBasedPage contractEmployeeBasedPage = new ContractEmployeeBasedPage(getChromeDriver());
        ContractKmBased ckm = new ContractKmBased(getChromeDriver());
       homePage.navigateToSettings();
        waitForCommandToFinish();
        homePage.navigateToNewContract();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        homePage.switchIframe();
        waitForCommandToFinish();
        contractEmployeeBasedPage.clickOnContractPage();
        Thread.sleep(20000);
        waitForCommandToFinish();
        contractEmployeeBasedPage.clickToContractUpdate();
        waitForCommandToFinish();
        contractEmployeeBasedPage.clickSearchKMSlab();
        waitForCommandToFinish();
        contractEmployeeBasedPage.selectBillingModelKmSlab();
        contractEmployeeBasedPage.selectCabType();
        contractEmployeeBasedPage.editGST();
        contractEmployeeBasedPage.selectFuelType();
        contractEmployeeBasedPage.selectBillingContractType();
        contractEmployeeBasedPage.selectTripKmSchema();
        contractEmployeeBasedPage.selectDutyParameter();
        contractEmployeeBasedPage.clickOnEmployeeBasedSlab();
        contractEmployeeBasedPage.addLogicType();
        contractEmployeeBasedPage.addEmployeeType();
        contractEmployeeBasedPage.addEmployeeModelSlabName();
        contractEmployeeBasedPage.addFuelCost();
        contractEmployeeBasedPage.addPerHeadKm();
        contractEmployeeBasedPage.addMaxKm();
        contractEmployeeBasedPage.saveContract();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        waitForCommandToFinish();
        homePage.switchToDefaultFrame();
        waitForCommandToFinish();
        homePage.navigateToDashboard();
        waitForCommandToFinish();
        HomePage homepage = new HomePage(getChromeDriver());
        DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
        String empNameSearch= excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
        String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
       dashboardPage.searchEmployeeInDasboard(empName,empNameSearch);
        DateAndTime dateAndTime=new DateAndTime();
        String hour2=dateAndTime.hour24formate();
        String min=dateAndTime.minTwoHourLater();
     dashboardPage.createNonShiftTripsheet(min , hour2);
     String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
     dashboardPage.assignCabToNewTripsheet(cabName);
     dashboardPage.saveTripsheet();

     dashboardPage.performTrip(hour2,min);
     String contractName = excel.getSheet("contract").getRow(1).getCell(0).getStringCellValue();
     dashboardPage.selectContract(contractName);
        dashboardPage.addEmployee();
     dashboardPage.saveTripsheetInformation();
        waitForCommandToFinish();
     dashboardPage.generateBill();
        homePage.navigateToDashboard();
        homePage.navigateToReportDownload();

    }*/

/* @Test(priority = 1)
 public void zoneVendorBased() throws Exception {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  ContractPage contractPage = new ContractPage(getChromeDriver());
  ZoneVendorBasedContractPage zoneVendor = new ZoneVendorBasedContractPage(getChromeDriver());
  ContractZoneBasedPage zoneBased = new ContractZoneBasedPage(getChromeDriver());
  BillingZonePage billingZonePage = new BillingZonePage(getChromeDriver());
  DateAndTime dateAndTime = new DateAndTime();
  homePage.navigateToSettings();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  Thread.sleep(10000);
  homePage.switchIframe();
  waitForCommandToFinish();
  // contractPage.clickOnContractPage();
  waitForCommandToFinish();
  // Thread.sleep(30000);
  contractPage.clickToContractUpdate();
  waitForCommandToFinish();
  contractPage.clickSearch();
  waitForCommandToFinish();
  zoneVendor.selectBillingModel();
  waitForCommandToFinish();
  contractPage.selectCabType();
  contractPage.editGST();
  contractPage.selectFuelType();
  contractPage.selectBillingContractType();
  contractPage.selectTripKmSchema();
  zoneVendor.selectDutyParameter();
  zoneVendor.clickOnZoneVendorSlab();
  String zoneName = excel.getSheet("contract").getRow(1).getCell(2).getStringCellValue();
  zoneBased.addZoneName(zoneName);
  zoneVendor.addFuelCost();
  zoneVendor.addTripCount();
  zoneVendor.addFixedCost();
  waitForCommandToFinish();
  zoneVendor.clickOnZoneVendorDateSlab();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  String dateInString = dateAndTime.getCurrentDate();
  zoneVendor.selectSingleCalenderDate(dateInString);
  zoneVendor.addTripCountinVendorDate();
  contractPage.saveContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  String empNameSearch = excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
  String hour2 = dateAndTime.hour24formate();
  String min = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min, hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  String tripId = dashboardPage.performTrip(hour2, min);

  //String contractName = excel.getSheet("contract").getRow(2).getCell(1).getStringCellValue();
  dashboardPage.selectContract("Trip_Test2");
  //String zoneName = excel.getSheet("contract").getRow(1).getCell(2).getStringCellValue();
  dashboardPage.selectZone(zoneName);
  dashboardPage.saveTripsheetInformation();
  waitForCommandToFinish();
  dashboardPage.generateBill();
  homePage.navigateToDashboard();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  zoneVendor.downloadReportDefault(tripId);
  waitForCommandToFinish();
  loginPage.logout();
  waitForCommandToFinish();
 }*/

 /*@Test(priority = 2)
 public void billCyclePackageTesting() throws Exception {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  ContractPage contractPage = new ContractPage(getChromeDriver());
  BillCyclePackageContractPage billCyclePackageContractPage = new BillCyclePackageContractPage(getChromeDriver());
  ContractZoneBasedPage zoneBased = new ContractZoneBasedPage(getChromeDriver());
  BillingZonePage billingZonePage = new BillingZonePage(getChromeDriver());
  DateAndTime dateAndTime = new DateAndTime();
  homePage.navigateToSettings();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  Thread.sleep(10000);
  homePage.switchIframe();
  waitForCommandToFinish();
  // contractPage.clickOnContractPage();
  waitForCommandToFinish();
  // Thread.sleep(30000);
  contractPage.clickToContractUpdate();
  waitForCommandToFinish();
  contractPage.clickSearch();
  waitForCommandToFinish();
  billCyclePackageContractPage.selectBillingModelBillCyclePackage();
  billCyclePackageContractPage.selectCabType();
  billCyclePackageContractPage.editGST();
  billCyclePackageContractPage.selectMileage();
  billCyclePackageContractPage.selectFuelType();
  billCyclePackageContractPage.selectBillingContractType();
  billCyclePackageContractPage.selectTripKmSchema();
  //billCyclePackageContractPage.selectDistributionLogic();
  billCyclePackageContractPage.selectDutyParameter();
  billCyclePackageContractPage.clickOnBillCyclePackageSlab();
  //billCyclePackageContractPage.addMaxDutyHourPerDuty();
  //billCyclePackageContractPage.selectCommulativeLevel();
  //billCyclePackageContractPage.selectBillingCycleFuelHikeCalculationType();
  //billCyclePackageContractPage.selectAutoProrate();
  //billCyclePackageContractPage.selectAutoProrateParameter();
  billCyclePackageContractPage.addSlabName();
  billCyclePackageContractPage.addFixedKm();
  //billCyclePackageContractPage.selectHourDurationType();
  billCyclePackageContractPage.addFixedHour();
  billCyclePackageContractPage.addFixedCost();
  billCyclePackageContractPage.selectAbsentCut();
  billCyclePackageContractPage.addExtraKmCost();
  billCyclePackageContractPage.addExtraHourCost();
  billCyclePackageContractPage.addExtraDutyCost();
  billCyclePackageContractPage.selectJumpCrieteria();
  contractPage.saveContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  String empNameSearch= excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName,empNameSearch);
  String hour2=dateAndTime.hour24formate();
  String min=dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min , hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet("GLKOW - 211 (SED P) (awip123444)");
  dashboardPage.saveTripsheet();
  String tripId = dashboardPage.performTrip(hour2,min);

  //String contractName = excel.getSheet("contract").getRow(2).getCell(1).getStringCellValue();
  dashboardPage.selectContract("Trip_Test2");
  //String zoneName = excel.getSheet("contract").getRow(1).getCell(2).getStringCellValue();
  //dashboardPage.selectZone(zoneName);
  dashboardPage.saveTripsheetInformation();
  waitForCommandToFinish();
  dashboardPage.generateBill();
  homePage.navigateToDashboard();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  billCyclePackageContractPage.downloadReportDefault(tripId);
  waitForCommandToFinish();
  //loginPage.logout();
  waitForCommandToFinish();
 }*/

 /*@Test(priority = 3)
 public void tripBasedWithEscortAll() throws Exception {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  ContractPage contractPage = new ContractPage(getChromeDriver());
  BillCyclePackageContractPage billCyclePackageContractPage = new BillCyclePackageContractPage(getChromeDriver());
  ContractZoneBasedPage zoneBased = new ContractZoneBasedPage(getChromeDriver());
  BillingZonePage billingZonePage = new BillingZonePage(getChromeDriver());
  EscortPage escortPage= new EscortPage(getChromeDriver());
  DateAndTime dateAndTime = new DateAndTime();
  homePage.navigateToSettings();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  Thread.sleep(10000);
  homePage.switchIframe();
  waitForCommandToFinish();
  contractPage.clickOnContractPage();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.clickToContractUpdate();
  waitForCommandToFinish();
  contractPage.clickSearch();
  waitForCommandToFinish();
  contractPage.selectBillingModel();
  contractPage.selectCabType();
  contractPage.editGST();
  contractPage.selectFuelType();
  contractPage.selectBillingContractType();
  contractPage.selectTripKmSchema();
  contractPage.selectDutyParameter();
  waitForCommandToFinish();
  contractPage.clickOnTripPackageSlab();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.addTripPackageSlabName();
  contractPage.addTripPackageSlabMaxKm();
  contractPage.addTripPackageSlabFuelCost();
  contractPage.addTripPackageSlabFixedCost();
  contractPage.addTripPackageSlabJumpCriteria();
  contractPage.addTripPackageSlabExtraKmCost();
  contractPage.addTripPackageSlabACSurcharge();
  contractPage.addTripPackageSlabAdditionalExtraKmCostAC();
  contractPage.addTripPackageSlabEscortAC();
  contractPage.addTripPackageSlabEscortNonAC();
  waitForCommandToFinish();
  escortPage.clickOnEscortSlab();
  escortPage.selectEscortUsageAll();
  escortPage.selectCostTypeFixed();
  escortPage.addCost();
  escortPage.addFuelCost();
  contractPage.saveContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  String empNameSearch = excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
  String hour2 = dateAndTime.hour24formate();
  String min = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min, hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  waitForCommandToFinish();
  dashboardPage.performTrip(hour2, min);
  String tripId = dashboardPage.performTrip(hour2, min);
  String contractName = WebElementHelper.getTripBasedCellValue(1, 0);
  dashboardPage.selectContract(contractName);
  dashboardPage.addEmployee("Rakesh Kumar Mallik ( 705812 )");
  dashboardPage.saveTripsheetInformation();
  waitForCommandToFinish();
  dashboardPage.generateBill();
  waitForCommandToFinish();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  waitForCommandToFinish();
  escortPage.downloadReportDefault(tripId);
  waitForCommandToFinish();
  loginPage.logout();
  waitForCommandToFinish();

 }

 @Test(priority = 1)
 public void tripBasedWithEscortmuttiplicaton() throws Exception {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  ContractPage contractPage = new ContractPage(getChromeDriver());
  BillCyclePackageContractPage billCyclePackageContractPage = new BillCyclePackageContractPage(getChromeDriver());
  ContractZoneBasedPage zoneBased = new ContractZoneBasedPage(getChromeDriver());
  BillingZonePage billingZonePage = new BillingZonePage(getChromeDriver());
  EscortPage escortPage= new EscortPage(getChromeDriver());
  DateAndTime dateAndTime = new DateAndTime();
  homePage.navigateToSettings();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  Thread.sleep(10000);
  homePage.switchIframe();
  waitForCommandToFinish();
  contractPage.clickOnContractPage();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.clickToContractUpdate();
  waitForCommandToFinish();
  contractPage.clickSearch();
  waitForCommandToFinish();
  contractPage.selectBillingModel();
  contractPage.selectCabType();
  contractPage.editGST();
  contractPage.selectFuelType();
  contractPage.selectBillingContractType();
  contractPage.selectTripKmSchema();
  contractPage.selectDutyParameter();
  waitForCommandToFinish();
  contractPage.clickOnTripPackageSlab();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.addTripPackageSlabName();
  contractPage.addTripPackageSlabMaxKm();
  contractPage.addTripPackageSlabFuelCost();
  contractPage.addTripPackageSlabFixedCost();
  contractPage.addTripPackageSlabJumpCriteria();
  contractPage.addTripPackageSlabExtraKmCost();
  contractPage.addTripPackageSlabACSurcharge();
  contractPage.addTripPackageSlabAdditionalExtraKmCostAC();
  contractPage.addTripPackageSlabEscortAC();
  contractPage.addTripPackageSlabEscortNonAC();
  waitForCommandToFinish();
  escortPage.clickOnEscortSlab();
  escortPage.selectEscortUsageAll();
  escortPage.selectCostTypeMultiplicationFactor();
  escortPage.addCost();
  escortPage.addFuelCost();
  contractPage.saveContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  String empNameSearch = excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
  String hour2 = dateAndTime.hour24formate();
  String min = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min, hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  waitForCommandToFinish();
  dashboardPage.performTrip(hour2, min);
  String tripId = dashboardPage.performTrip(hour2, min);
  String contractName = WebElementHelper.getTripBasedCellValue(1, 0);
  dashboardPage.selectContract(contractName);
  dashboardPage.addEmployee("Rakesh Kumar M");
  dashboardPage.saveTripsheetInformation();
  dashboardPage.auditDone();
  waitForCommandToFinish();
  dashboardPage.generateBill();
  waitForCommandToFinish();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  waitForCommandToFinish();
  escortPage.downloadReportDefaultMultiplicationFactor(tripId);
  waitForCommandToFinish();
  loginPage.logout();
  waitForCommandToFinish();

 }
 @Test(priority = 2)
 public void tripBasedWithEscortSlabRate() throws Exception {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  ContractPage contractPage = new ContractPage(getChromeDriver());
  BillCyclePackageContractPage billCyclePackageContractPage = new BillCyclePackageContractPage(getChromeDriver());
  ContractZoneBasedPage zoneBased = new ContractZoneBasedPage(getChromeDriver());
  BillingZonePage billingZonePage = new BillingZonePage(getChromeDriver());
  EscortPage escortPage= new EscortPage(getChromeDriver());
  DateAndTime dateAndTime = new DateAndTime();
  homePage.navigateToSettings();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  Thread.sleep(10000);
  homePage.switchIframe();
  waitForCommandToFinish();
  contractPage.clickOnContractPage();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.clickToContractUpdate();
  waitForCommandToFinish();
  contractPage.clickSearch();
  waitForCommandToFinish();
  contractPage.selectBillingModel();
  contractPage.selectCabType();
  contractPage.editGST();
  contractPage.selectFuelType();
  contractPage.selectBillingContractType();
  contractPage.selectTripKmSchema();
  contractPage.selectDutyParameter();
  waitForCommandToFinish();
  contractPage.clickOnTripPackageSlab();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.addTripPackageSlabName();
  contractPage.addTripPackageSlabMaxKm();
  contractPage.addTripPackageSlabFuelCost();
  contractPage.addTripPackageSlabFixedCost();
  contractPage.addTripPackageSlabJumpCriteria();
  contractPage.addTripPackageSlabExtraKmCost();
  contractPage.addTripPackageSlabACSurcharge();
  contractPage.addTripPackageSlabAdditionalExtraKmCostAC();
  contractPage.addTripPackageSlabEscortAC();
  contractPage.addTripPackageSlabEscortNonAC();
  waitForCommandToFinish();
  escortPage.clickOnEscortSlab();
  escortPage.selectEscortUsageAll();
  escortPage.selectCostTypeSlabRate();
  escortPage.addCost();
  escortPage.addFuelCost();
  contractPage.saveContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  String empNameSearch = excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
  String hour2 = dateAndTime.hour24formate();
  String min = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min, hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  waitForCommandToFinish();
  dashboardPage.performTrip(hour2, min);
  String tripId = dashboardPage.performTrip(hour2, min);
  String contractName = WebElementHelper.getTripBasedCellValue(1, 0);
  dashboardPage.selectContract(contractName);
  dashboardPage.addEmployee("Rakesh Kumar M");
  dashboardPage.saveTripsheetInformation();
  dashboardPage.auditDone();
  waitForCommandToFinish();
  dashboardPage.generateBill();
  waitForCommandToFinish();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  waitForCommandToFinish();
  escortPage.downloadReportDefaultSlabRate(tripId);
  waitForCommandToFinish();
  loginPage.logout();
  waitForCommandToFinish();

 }*/
 /*@Test(priority = 4)
 public void tripWiseBillingModel() throws InterruptedException, ParseException, IOException {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  FuelTypePage fuelTypePage = new FuelTypePage(getChromeDriver());
  ContractPage contractPage = new ContractPage(getChromeDriver());
  homePage.navigateToSettings();
  waitForCommandToFinish();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchIframe();
  waitForCommandToFinish();
  contractPage.clickOnContractPage();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.clickToContractUpdate();
  waitForCommandToFinish();
  contractPage.clickSearch();
  waitForCommandToFinish();
  contractPage.selectBillingModel();
  contractPage.selectCabType();
  contractPage.editGST();
  contractPage.selectFuelType();
  contractPage.selectBillingContractType();
  contractPage.selectTripKmSchema();
  contractPage.selectDutyParameter();
  waitForCommandToFinish();
  contractPage.clickOnTripPackageSlab();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.addTripPackageSlabName();
  contractPage.addTripPackageSlabMaxKm();
  contractPage.addTripPackageSlabFuelCost();
  contractPage.addTripPackageSlabFixedCost();
  contractPage.addTripPackageSlabJumpCriteria();
  contractPage.addTripPackageSlabExtraKmCost();
  contractPage.addTripPackageSlabACSurcharge();
  contractPage.addTripPackageSlabAdditionalExtraKmCostAC();
  contractPage.addTripPackageSlabEscortAC();
  contractPage.addTripPackageSlabEscortNonAC();
  contractPage.saveContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  String empNameSearch = excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
  DateAndTime dateAndTime = new DateAndTime();
  String hour2 = dateAndTime.hour24formate();
  String min = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min, hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  waitForCommandToFinish();
  dashboardPage.performTrip(hour2, min);
  String tripId = dashboardPage.performTrip(hour2, min);
  String contractName = WebElementHelper.getTripBasedCellValue(1, 0);
  dashboardPage.selectContract(contractName);
  //dashboardPage.addEmployee();
  dashboardPage.saveTripsheetInformation();
  dashboardPage.auditDone();
  waitForCommandToFinish();
  dashboardPage.generateBill();
  waitForCommandToFinish();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  homePage.downloadReportDefault(tripId);
  waitForCommandToFinish();
  loginPage.logout();
  waitForCommandToFinish();

 }*/

 /*@Test(priority = 5)
 public void dailyPackageBillingModel() throws InterruptedException, ParseException, IOException {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  FuelTypePage fuelTypePage = new FuelTypePage(getChromeDriver());
  DailyPackage dailyPackage = new DailyPackage(getChromeDriver());
  homePage.navigateToSettings();
  waitForCommandToFinish();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchIframe();
  waitForCommandToFinish();
  dailyPackage.clickOnContractPage();
  waitForCommandToFinish();
  Thread.sleep(30000);
  dailyPackage.clickToContractUpdate();
  waitForCommandToFinish();
  dailyPackage.clickSearchDailyPackage();
  waitForCommandToFinish();
  dailyPackage.selectBillingModel();
  dailyPackage.selectCabType();
  dailyPackage.editGST();
  dailyPackage.selectFuelType();
  dailyPackage.selectBillingContractType();
  dailyPackage.selectTripKmSchema();
  dailyPackage.selectDistributionLogic();
  dailyPackage.selectDutyParameter();
  waitForCommandToFinish();
  dailyPackage.clickOnDailyPackageSlab();
  waitForCommandToFinish();
  waitForCommandToFinish();
  dailyPackage.addDailyPackageSlabName();
  dailyPackage.addDailyPackageSlabFixedKm();
  dailyPackage.addDailyPackageSlabFixedHour();
  dailyPackage.addDailyPackageSlabFixedCost();
  dailyPackage.addDailyPackageSlabJumpCriteria();
  dailyPackage.addDailyPackageSlabExtraKmCost();
  dailyPackage.addDailyPackageSlabExtraKmHour();
  dailyPackage.saveContract();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  String empNameSearch = excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
  DateAndTime dateAndTime = new DateAndTime();
  String hour2 = dateAndTime.hour24formate();
  String min = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min, hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  waitForCommandToFinish();
  dashboardPage.performTrip(hour2, min);
  String contractName = WebElementHelper.getTripBasedCellValue(1, 0);
  dashboardPage.selectContract(contractName);
  dashboardPage.addEmployee();
  dashboardPage.saveTripsheetInformation();
  String tripId = dashboardPage.performTrip(hour2, min);
  waitForCommandToFinish();
  dashboardPage.generateBill();
  waitForCommandToFinish();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  dailyPackage.downloadReportDefault(tripId);
  waitForCommandToFinish();
  loginPage.logout();
  waitForCommandToFinish();

 }

 @Test(priority = 6)
 public void outstationBillingModel() throws InterruptedException, ParseException, IOException {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  FuelTypePage fuelTypePage = new FuelTypePage(getChromeDriver());
  OutstationPackage outstationPackage = new OutstationPackage(getChromeDriver());
  homePage.navigateToSettings();
  waitForCommandToFinish();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchIframe();
  waitForCommandToFinish();
  outstationPackage.clickOnContractPage();
  waitForCommandToFinish();
  waitForCommandToFinish();
  outstationPackage.clickToContractUpdate();
  waitForCommandToFinish();
  outstationPackage.clickSearchOutstationPackage();
  waitForCommandToFinish();
  outstationPackage.selectBillingModel();
  outstationPackage.selectCabType();
  outstationPackage.editGST();
  outstationPackage.selectFuelType();
  outstationPackage.selectBillingContractType();
  outstationPackage.selectTripKmSchema();
  outstationPackage.selectDutyParameter();
  waitForCommandToFinish();
  outstationPackage.clickSearchOutstationPackage();
  waitForCommandToFinish();
  waitForCommandToFinish();
  outstationPackage.addOutstationPackageSlabName();
  outstationPackage.addOutstationPackageSlabFixedKm();
  outstationPackage.addOutstationPackageSlabFixedHour();
  outstationPackage.addOutstationPackageSlabFixedCost();
  outstationPackage.addOutstationPackageSlabExtraKmCost();
  outstationPackage.addOutstationPackageSlabExtraKmHour();
  outstationPackage.saveContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  String empNameSearch = excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
  DateAndTime dateAndTime = new DateAndTime();
  String hour2 = dateAndTime.hour24formate();
  String min = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min, hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  waitForCommandToFinish();
  dashboardPage.performTrip(hour2, min);
  String contractName = WebElementHelper.getTripBasedCellValue(1, 0);
  dashboardPage.selectContract(contractName);
  dashboardPage.addEmployee();
  dashboardPage.saveTripsheetInformation();
  String tripId = dashboardPage.performTrip(hour2, min);
  waitForCommandToFinish();
  dashboardPage.generateBill();
  waitForCommandToFinish();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  outstationPackage.downloadReportDefault(tripId);
  waitForCommandToFinish();
  loginPage.logout();
  waitForCommandToFinish();
 }*/

/* @Test(priority = 7)
 public void kmSlabBillingModel() throws InterruptedException, ParseException, IOException {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  ContractKmBased contractKmBased = new ContractKmBased(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  homePage.navigateToSettings();
  waitForCommandToFinish();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchIframe();
  waitForCommandToFinish();
  contractKmBased.clickOnContractPage();
  waitForCommandToFinish();
  Thread.sleep(30000);
  contractKmBased.clickToContractUpdate();
  waitForCommandToFinish();
  contractKmBased.clickSearchKMSlab();
  waitForCommandToFinish();
  contractKmBased.selectBillingModelKmSlab();
  waitForCommandToFinish();
  contractKmBased.selectCabType();
  contractKmBased.editGST();
  contractKmBased.selectMileage();
  contractKmBased.selectFuelType();
  contractKmBased.selectBillingContractType();
  contractKmBased.selectTripKmSchema();
  contractKmBased.selectDistributionLogic();
  contractKmBased.selectDutyParameter();
  waitForCommandToFinish();
  contractKmBased.clickOnKmSlab();
  waitForCommandToFinish();
  contractKmBased.addKmSlabName();
  contractKmBased.addMaxKm();
  contractKmBased.addCostPerKm();
  contractKmBased.saveContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  String empNameSearch = excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
  DateAndTime dateAndTime = new DateAndTime();
  String hour2 = dateAndTime.hour24formate();
  String min = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min, hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  String tripId = dashboardPage.performTrip(hour2, min);
  String contractName = excel.getSheet("contract").getRow(2).getCell(0).getStringCellValue();
  dashboardPage.selectContract(contractName);
  dashboardPage.saveTripsheetInformation();
  dashboardPage.addKm();
  dashboardPage.auditDone();
  dashboardPage.generateBill();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  contractKmBased.downloadReportDefault(tripId);
  waitForCommandToFinish();
  loginPage.logout();
  waitForCommandToFinish();
 }*/

 /*@Test(priority = 2)
 public void zoneBasedTesting() throws InterruptedException, ParseException, IOException {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  ContractPage contractPage = new ContractPage(getChromeDriver());
  ContractZoneBasedPage contractZoneBasedPage = new ContractZoneBasedPage(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  homePage.navigateToSettings();
  homePage.navigateToBillingZone();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.navigateToSettings();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchIframe();
  waitForCommandToFinish();
  contractZoneBasedPage.clickOnBillingZonePage();
  Thread.sleep(10000);
  contractZoneBasedPage.clickOnContractPage();
  waitForCommandToFinish();
  Thread.sleep(30000);
  contractZoneBasedPage.clickToContractUpdate();
  waitForCommandToFinish();
  contractZoneBasedPage.clickSearchZoneBased();
  waitForCommandToFinish();
  contractZoneBasedPage.selectBillingModel();
  waitForCommandToFinish();
  contractZoneBasedPage.selectCabType();
  contractZoneBasedPage.editGST();
  contractZoneBasedPage.selectFuelType();
  contractZoneBasedPage.selectBillingContractType();
  contractZoneBasedPage.selectTripKmSchema();
  contractZoneBasedPage.selectDutyParameter();
  contractZoneBasedPage.clickOnZoneBased();
  contractZoneBasedPage.addZoneSlabName();
  String zoneName = excel.getSheet("contract").getRow(1).getCell(2).getStringCellValue();
  contractZoneBasedPage.addZoneName(zoneName);
  contractZoneBasedPage.addFuelCost();
  contractZoneBasedPage.addFixedCost();
  contractZoneBasedPage.saveContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  String empNameSearch = excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
  DateAndTime dateAndTime = new DateAndTime();
  String hour2 = dateAndTime.hour24formate();
  String min = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min, hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  String tripId = dashboardPage.performTrip(hour2, min);
  String contractName = excel.getSheet("contract").getRow(2).getCell(1).getStringCellValue();
  dashboardPage.selectContract("Trip_Test1");
  String zoneName = excel.getSheet("contract").getRow(1).getCell(2).getStringCellValue();
  dashboardPage.selectZone(zoneName);
  dashboardPage.saveTripsheetInformation();
  dashboardPage.auditDone();
  waitForCommandToFinish();
  dashboardPage.generateBill();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  contractZoneBasedPage.downloadReportDefault(tripId);
  waitForCommandToFinish();
  loginPage.logout();
  waitForCommandToFinish();

 }*/
 /*@Test(priority = 1)
 public void employeeBasedTesting() throws InterruptedException, ParseException {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  ContractEmployeeBasedPage contractEmployeeBasedPage = new ContractEmployeeBasedPage(getChromeDriver());
  homePage.navigateToSettings();
  waitForCommandToFinish();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchIframe();
  waitForCommandToFinish();
  contractEmployeeBasedPage.clickOnContractPage();
  Thread.sleep(20000);
  waitForCommandToFinish();
  contractEmployeeBasedPage.clickToContractUpdate();
  waitForCommandToFinish();
  contractEmployeeBasedPage.clickSearchKMSlab();
  waitForCommandToFinish();
  contractEmployeeBasedPage.selectBillingModelKmSlab();
  contractEmployeeBasedPage.selectCabType();
  contractEmployeeBasedPage.editGST();
  contractEmployeeBasedPage.selectFuelType();
  contractEmployeeBasedPage.selectBillingContractType();
  contractEmployeeBasedPage.selectTripKmSchema();
  contractEmployeeBasedPage.selectDutyParameter();
  contractEmployeeBasedPage.clickOnEmployeeBasedSlab();
  contractEmployeeBasedPage.addLogicType();
  contractEmployeeBasedPage.addEmployeeType();
  contractEmployeeBasedPage.addEmployeeModelSlabName();
  contractEmployeeBasedPage.addFuelCost();
  contractEmployeeBasedPage.addPerHeadKm();
  contractEmployeeBasedPage.addMaxKm();
  contractEmployeeBasedPage.saveContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  String empNameSearch = excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
  DateAndTime dateAndTime = new DateAndTime();
  String hour2 = dateAndTime.hour24formate();
  String min = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min, hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  String tripId = dashboardPage.performTrip(hour2, min);
  String contractName = excel.getSheet("contract").getRow(2).getCell(1).getStringCellValue();
  dashboardPage.selectContract("Trip_Test1");
  dashboardPage.addEmployee("Mamta B");
  dashboardPage.saveTripsheetInformation();
  dashboardPage.auditDone();
  waitForCommandToFinish();
  waitForCommandToFinish();
  dashboardPage.generateBill();
  waitForCommandToFinish();
  //String tripId = dashboardPage.performTrip(hour2, min);
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  contractEmployeeBasedPage.downloadReportDefault(tripId);
  waitForCommandToFinish();
  loginPage.logout();
  waitForCommandToFinish();

 }*/
 /*@Test(priority = 1)
 public void tripBasedWithEscortFirstTrip() throws Exception {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  ContractPage contractPage = new ContractPage(getChromeDriver());
  BillCyclePackageContractPage billCyclePackageContractPage = new BillCyclePackageContractPage(getChromeDriver());
  ContractZoneBasedPage zoneBased = new ContractZoneBasedPage(getChromeDriver());
  BillingZonePage billingZonePage = new BillingZonePage(getChromeDriver());
  EscortPage escortPage= new EscortPage(getChromeDriver());
  DateAndTime dateAndTime = new DateAndTime();
  homePage.navigateToSettings();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  Thread.sleep(10000);
  homePage.switchIframe();
  waitForCommandToFinish();
  contractPage.clickOnContractPage();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.clickToContractUpdate();
  waitForCommandToFinish();
  contractPage.clickSearch();
  waitForCommandToFinish();
  contractPage.selectBillingModel();
  contractPage.selectCabType();
  contractPage.editGST();
  contractPage.selectFuelType();
  contractPage.selectBillingContractType();
  contractPage.selectTripKmSchema();
  contractPage.selectDutyParameter();
  waitForCommandToFinish();
  contractPage.clickOnTripPackageSlab();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.addTripPackageSlabName();
  contractPage.addTripPackageSlabMaxKm();
  contractPage.addTripPackageSlabFuelCost();
  contractPage.addTripPackageSlabFixedCost();
  contractPage.addTripPackageSlabJumpCriteria();
  contractPage.addTripPackageSlabExtraKmCost();
  contractPage.addTripPackageSlabACSurcharge();
  contractPage.addTripPackageSlabAdditionalExtraKmCostAC();
  contractPage.addTripPackageSlabEscortAC();
  contractPage.addTripPackageSlabEscortNonAC();
  waitForCommandToFinish();
  escortPage.clickOnEscortSlab();
  escortPage.selectEscortUsageFirstTrip();
  escortPage.selectCostTypeFixed();
  escortPage.addCost();
  escortPage.addFuelCost();
  contractPage.saveContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  String empNameSearch = excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
  String hour2 = dateAndTime.hour24formate();
  String min = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min, hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  waitForCommandToFinish();
  dashboardPage.performTrip(hour2, min);
  String tripIdFirst = dashboardPage.performTrip(hour2, min);
  String contractName = WebElementHelper.getTripBasedCellValue(1, 0);
  dashboardPage.selectContract(contractName);
  dashboardPage.addEmployee("Rakesh Kumar M");
  dashboardPage.saveTripsheetInformation();
  dashboardPage.auditDone();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
 // dashboardPage.generateBill();
  waitForCommandToFinish();
  //homePage.navigateToReportDownload();
  //waitForCommandToFinish();
  //waitForCommandToFinish();
  dashboardPage.searchEmployeeInDasboard("Mamta Barnwal ( 2929 )", "mam");
  String hour2Last = dateAndTime.hour24formate();
  String minLast = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(minLast, hour2Last);
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  waitForCommandToFinish();
  dashboardPage.performTrip(hour2, min);
  String tripIdLast = dashboardPage.performTrip(hour2, min);
  dashboardPage.selectContract(contractName);
  dashboardPage.addEmployee("Rakesh Kumar M");
  dashboardPage.saveTripsheetInformation();
  dashboardPage.auditDone();
  waitForCommandToFinish();
  dashboardPage.generateBill();
  waitForCommandToFinish();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  waitForCommandToFinish();
  escortPage.downloadReportDefaultForFirstTrip(tripIdFirst , tripIdLast);
  waitForCommandToFinish();
  loginPage.logout();
  waitForCommandToFinish();

 }*/

 /*@Test(priority = 1)
 public void tripBasedWithEscortmuttiplicaton() throws Exception {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  ContractPage contractPage = new ContractPage(getChromeDriver());
  BillCyclePackageContractPage billCyclePackageContractPage = new BillCyclePackageContractPage(getChromeDriver());
  ContractZoneBasedPage zoneBased = new ContractZoneBasedPage(getChromeDriver());
  BillingZonePage billingZonePage = new BillingZonePage(getChromeDriver());
  EscortPage escortPage= new EscortPage(getChromeDriver());
  DateAndTime dateAndTime = new DateAndTime();
  homePage.navigateToSettings();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  Thread.sleep(10000);
  homePage.switchIframe();
  waitForCommandToFinish();
  contractPage.clickOnContractPage();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.clickToContractUpdate();
  waitForCommandToFinish();
  contractPage.clickSearch();
  waitForCommandToFinish();
  contractPage.selectBillingModel();
  contractPage.selectCabType();
  contractPage.editGST();
  contractPage.selectFuelType();
  contractPage.selectBillingContractType();
  contractPage.selectTripKmSchema();
  contractPage.selectDutyParameter();
  waitForCommandToFinish();
  contractPage.clickOnTripPackageSlab();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.addTripPackageSlabName();
  contractPage.addTripPackageSlabMaxKm();
  contractPage.addTripPackageSlabFuelCost();
  contractPage.addTripPackageSlabFixedCost();
  contractPage.addTripPackageSlabJumpCriteria();
  contractPage.addTripPackageSlabExtraKmCost();
  contractPage.addTripPackageSlabACSurcharge();
  contractPage.addTripPackageSlabAdditionalExtraKmCostAC();
  contractPage.addTripPackageSlabEscortAC();
  contractPage.addTripPackageSlabEscortNonAC();
  waitForCommandToFinish();
  escortPage.clickOnEscortSlab();
  escortPage.selectEscortUsageAll();
  escortPage.selectCostTypeMultiplicationFactor();
  escortPage.addCost();
  escortPage.addFuelCost();
  contractPage.saveContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  String empNameSearch = excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
  String hour2 = dateAndTime.hour24formate();
  String min = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min, hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  waitForCommandToFinish();
  dashboardPage.performTrip(hour2, min);
  String tripId = dashboardPage.performTrip(hour2, min);
  String contractName = WebElementHelper.getTripBasedCellValue(1, 0);
  dashboardPage.selectContract(contractName);
  dashboardPage.addEmployee("Rakesh Kumar M");
  dashboardPage.saveTripsheetInformation();
  dashboardPage.auditDone();
  waitForCommandToFinish();
  dashboardPage.generateBill();
  waitForCommandToFinish();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  waitForCommandToFinish();
  escortPage.downloadReportDefaultMultiplicationFactor(tripId);
  waitForCommandToFinish();
  loginPage.logout();
  waitForCommandToFinish();

 }
 @Test(priority = 2)
 public void tripBasedWithEscortSlabRate() throws Exception {
  getChromeDriver().get(PropertyReader.getProperty("base.url"));
  getNgWebDriver().waitForAngularRequestsToFinish();
  LoginPage loginPage = new LoginPage(getChromeDriver());
  loginPage.login(PropertyReader.getProperty("web.user.name"), PropertyReader.getProperty("web.user.password"));
  waitForCommandToFinish();
  HomePage homePage = new HomePage(getChromeDriver());
  DashboardPage dashboardPage = new DashboardPage(getChromeDriver());
  ContractPage contractPage = new ContractPage(getChromeDriver());
  BillCyclePackageContractPage billCyclePackageContractPage = new BillCyclePackageContractPage(getChromeDriver());
  ContractZoneBasedPage zoneBased = new ContractZoneBasedPage(getChromeDriver());
  BillingZonePage billingZonePage = new BillingZonePage(getChromeDriver());
  EscortPage escortPage = new EscortPage(getChromeDriver());
  DateAndTime dateAndTime = new DateAndTime();
  homePage.navigateToSettings();
  homePage.navigateToNewContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  Thread.sleep(10000);
  homePage.switchIframe();
  waitForCommandToFinish();
  contractPage.clickOnContractPage();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.clickToContractUpdate();
  waitForCommandToFinish();
  contractPage.clickSearch();
  waitForCommandToFinish();
  contractPage.selectBillingModel();
  contractPage.selectCabType();
  contractPage.editGST();
  contractPage.selectFuelType();
  contractPage.selectBillingContractType();
  contractPage.selectTripKmSchema();
  contractPage.selectDutyParameter();
  waitForCommandToFinish();
  contractPage.clickOnTripPackageSlab();
  waitForCommandToFinish();
  waitForCommandToFinish();
  contractPage.addTripPackageSlabName();
  contractPage.addTripPackageSlabMaxKm();
  contractPage.addTripPackageSlabFuelCost();
  contractPage.addTripPackageSlabFixedCost();
  contractPage.addTripPackageSlabJumpCriteria();
  contractPage.addTripPackageSlabExtraKmCost();
  contractPage.addTripPackageSlabACSurcharge();
  contractPage.addTripPackageSlabAdditionalExtraKmCostAC();
  contractPage.addTripPackageSlabEscortAC();
  contractPage.addTripPackageSlabEscortNonAC();
  waitForCommandToFinish();
  escortPage.clickOnEscortSlab();
  escortPage.selectEscortUsageAll();
  escortPage.selectCostTypeSlabRate();
  escortPage.addCost();
  escortPage.addFuelCost();
  contractPage.saveContract();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  waitForCommandToFinish();
  homePage.switchToDefaultFrame();
  waitForCommandToFinish();
  homePage.navigateToDashboard();
  waitForCommandToFinish();
  HomePage homepage = new HomePage(getChromeDriver());
  String empNameSearch = excel.getSheet("addemployee").getRow(1).getCell(0).getStringCellValue();
  String empName = excel.getSheet("addemployee").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.searchEmployeeInDasboard(empName, empNameSearch);
  String hour2 = dateAndTime.hour24formate();
  String min = dateAndTime.minTwoHourLater();
  dashboardPage.createNonShiftTripsheet(min, hour2);
  String cabName = excel.getSheet("contract").getRow(1).getCell(1).getStringCellValue();
  dashboardPage.assignCabToNewTripsheet(cabName);
  dashboardPage.saveTripsheet();
  waitForCommandToFinish();
  dashboardPage.performTrip(hour2, min);
  String tripId = dashboardPage.performTrip(hour2, min);
  String contractName = WebElementHelper.getTripBasedCellValue(1, 0);
  dashboardPage.selectContract(contractName);
  dashboardPage.addEmployee("Rakesh Kumar M");
  dashboardPage.saveTripsheetInformation();
  dashboardPage.auditDone();
  waitForCommandToFinish();
  dashboardPage.generateBill();
  waitForCommandToFinish();
  homePage.navigateToReportDownload();
  waitForCommandToFinish();
  waitForCommandToFinish();
  escortPage.downloadReportDefaultSlabRate(tripId);
  waitForCommandToFinish();
  loginPage.logout();
  waitForCommandToFinish();

 }*/
 }



